/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/main.js":
/*!********************!*\
  !*** ./js/main.js ***!
  \********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_ios_vh_fix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/ios-vh-fix */ "./js/utils/ios-vh-fix.js");
/* harmony import */ var _modules_modals_init_modals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/modals/init-modals */ "./js/modules/modals/init-modals.js");
/* harmony import */ var _modules_init_accordion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/init-accordion */ "./js/modules/init-accordion.js");
/* harmony import */ var _modules_init_tabs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/init-tabs */ "./js/modules/init-tabs.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }




// ---------------------------------

window.addEventListener('DOMContentLoaded', function () {
  // Utils
  // ---------------------------------

  Object(_utils_ios_vh_fix__WEBPACK_IMPORTED_MODULE_0__["iosVhFix"])();

  // Modules
  // ---------------------------------

  // все скрипты должны быть в обработчике 'DOMContentLoaded', но не все в 'load'
  // в load следует добавить скрипты, не участвующие в работе первого экрана
  window.addEventListener('load', function () {
    Object(_modules_modals_init_modals__WEBPACK_IMPORTED_MODULE_1__["initModals"])();
    Object(_modules_init_accordion__WEBPACK_IMPORTED_MODULE_2__["initAccordions"])();
    Object(_modules_init_tabs__WEBPACK_IMPORTED_MODULE_3__["initTabs"])();

    /**
    * Display a nice easy to use multiselect list
    * @Version: 2.4.22
    * @Author: Patrick Springstubbe
    * @Contact: @JediNobleclem
    * @Website: springstubbe.us
    * @Source: https://github.com/nobleclem/jQuery-MultiSelect
    *
    * Usage:
    *     $('select[multiple]').multiselect();
    *     $('select[multiple]').multiselect({ texts: { placeholder: 'Select options' } });
    *     $('select[multiple]').multiselect('reload');
    *     $('select[multiple]').multiselect( 'loadOptions', [{
    *         name   : 'Option Name 1',
    *         value  : 'option-value-1',
    *         checked: false,
    *         attributes : {
    *             custom1: 'value1',
    *             custom2: 'value2'
    *         }
    *     },{
    *         name   : 'Option Name 2',
    *         value  : 'option-value-2',
    *         checked: false,
    *         attributes : {
    *             custom1: 'value1',
    *             custom2: 'value2'
    *         }
    *     }]);
    *
    **/
    (function ($) {
      var defaults = {
        columns: 1,
        // how many columns should be use to show options
        search: false,
        // include option search box

        // search filter options
        searchOptions: {
          delay: 250,
          // time (in ms) between keystrokes until search happens
          showOptGroups: false,
          // show option group titles if no options remaining
          searchText: true,
          // search within the text
          searchValue: false,
          // search within the value
          onSearch: function onSearch(element) {} // fires on keyup before search on options happens
        },

        // plugin texts
        texts: {
          placeholder: 'Выберите значения',
          // text to use in dummy input
          search: 'Поиск',
          // search input placeholder text
          searchNoResult: 'Нет результатов',
          // search results not found text
          selectedOptions: ' Выбрано',
          // selected suffix text
          selectAll: 'Выбрать все',
          // select all text
          unselectAll: 'Снять выбор',
          // unselect all text
          noneSelected: 'Ничего не выбрано' // None selected text
        },

        // general options
        selectAll: false,
        // add select all option
        selectGroup: false,
        // select entire optgroup
        minHeight: 200,
        // minimum height of option overlay
        maxHeight: null,
        // maximum height of option overlay
        maxWidth: null,
        // maximum width of option overlay (or selector)
        maxPlaceholderWidth: null,
        // maximum width of placeholder button
        maxPlaceholderOpts: 10,
        // maximum number of placeholder options to show until "# selected" shown instead
        showCheckbox: true,
        // display the checkbox to the user
        checkboxAutoFit: false,
        // auto calc checkbox padding
        optionAttributes: [],
        // attributes to copy to the checkbox from the option element
        replacePlaceholderText: true,
        // replace text of placeholder if button is too small

        // Callbacks
        onLoad: function onLoad(element) {},
        // fires at end of list initialization
        onOptionClick: function onOptionClick(element, option) {},
        // fires when an option is clicked
        onControlOpen: function onControlOpen(element) {},
        // fires when the options list is opened
        onControlClose: function onControlClose(element) {},
        // fires when the options list is closed
        onSelectAll: function onSelectAll(element, selected) {},
        // fires when (un)select all is clicked
        onPlaceholder: function onPlaceholder(element, placeholder, selectedOpts) {} // fires when the placeholder txt is updated
      };

      var msCounter = 1; // counter for each select list
      var msOptCounter = 1; // counter for each option on page

      // FOR LEGACY BROWSERS (talking to you IE8)
      if (typeof Array.prototype.map !== 'function') {
        Array.prototype.map = function (callback, thisArg) {
          if (typeof thisArg === 'undefined') {
            thisArg = this;
          }
          return $.isArray(thisArg) ? $.map(thisArg, callback) : [];
        };
      }
      if (typeof String.prototype.trim !== 'function') {
        String.prototype.trim = function () {
          return this.replace(/^\s+|\s+$/g, '');
        };
      }
      function MultiSelect(element, options) {
        this.element = element;
        this.options = $.extend(true, {}, defaults, options);
        this.updateSelectAll = true;
        this.updatePlaceholder = true;
        this.listNumber = msCounter;
        msCounter = msCounter + 1; // increment counter

        /* Make sure its a multiselect list */
        if (!$(this.element).attr('multiple')) {
          throw new Error('[jQuery-MultiSelect] Select list must be a multiselect list in order to use this plugin');
        }

        /* Options validation checks */
        if (this.options.search) {
          if (!this.options.searchOptions.searchText && !this.options.searchOptions.searchValue) {
            throw new Error('[jQuery-MultiSelect] Either searchText or searchValue should be true.');
          }
        }

        /** BACKWARDS COMPATIBILITY **/
        if ('placeholder' in this.options) {
          this.options.texts.placeholder = this.options.placeholder;
          delete this.options.placeholder;
        }
        if ('default' in this.options.searchOptions) {
          this.options.texts.search = this.options.searchOptions['default'];
          delete this.options.searchOptions['default'];
        }
        /** END BACKWARDS COMPATIBILITY **/

        // load this instance
        this.load();
      }
      MultiSelect.prototype = {
        /* LOAD CUSTOM MULTISELECT DOM/ACTIONS */
        load: function load() {
          var instance = this;

          // make sure this is a select list and not loaded
          if (instance.element.nodeName != 'SELECT' || $(instance.element).hasClass('jqmsLoaded')) {
            return true;
          }

          // sanity check so we don't double load on a select element
          $(instance.element).addClass('jqmsLoaded ms-list-' + instance.listNumber).data('plugin_multiselect-instance', instance);

          // add option container
          $(instance.element).after('<div id="ms-list-' + instance.listNumber + '" class="ms-options-wrap"><button type="button"><span>None Selected</span></button><div class="ms-options"><ul></ul></div></div>');
          var placeholder = $(instance.element).siblings('#ms-list-' + instance.listNumber + '.ms-options-wrap').find('> button:first-child');
          var optionsWrap = $(instance.element).siblings('#ms-list-' + instance.listNumber + '.ms-options-wrap').find('> .ms-options');
          var optionsList = optionsWrap.find('> ul');

          // don't show checkbox (add class for css to hide checkboxes)
          if (!instance.options.showCheckbox) {
            optionsWrap.addClass('hide-checkbox');
          } else if (instance.options.checkboxAutoFit) {
            optionsWrap.addClass('checkbox-autofit');
          }

          // check if list is disabled
          if ($(instance.element).prop('disabled')) {
            placeholder.prop('disabled', true);
          }

          // set placeholder maxWidth
          if (instance.options.maxPlaceholderWidth) {
            placeholder.css('maxWidth', instance.options.maxPlaceholderWidth);
          }

          // override with user defined maxHeight
          if (instance.options.maxHeight) {
            var maxHeight = instance.options.maxHeight;
          } else {
            // cacl default maxHeight
            var maxHeight = $(window).height() - optionsWrap.offset().top + $(window).scrollTop() - 20;
          }

          // maxHeight cannot be less than options.minHeight
          maxHeight = maxHeight < instance.options.minHeight ? instance.options.minHeight : maxHeight;
          optionsWrap.css({
            maxWidth: instance.options.maxWidth,
            minHeight: instance.options.minHeight,
            maxHeight: maxHeight
          });

          // isolate options scroll
          // @source: https://github.com/nobleclem/jQuery-IsolatedScroll
          optionsWrap.on('touchmove mousewheel DOMMouseScroll', function (e) {
            if ($(this).outerHeight() < $(this)[0].scrollHeight) {
              var e0 = e.originalEvent,
                delta = e0.wheelDelta || -e0.detail;
              if ($(this).outerHeight() + $(this)[0].scrollTop > $(this)[0].scrollHeight) {
                e.preventDefault();
                this.scrollTop += delta < 0 ? 1 : -1;
              }
            }
          });

          // hide options menus if click happens off of the list placeholder button
          $(document).off('click.ms-hideopts').on('click.ms-hideopts', function (event) {
            if (!$(event.target).closest('.ms-options-wrap').length) {
              $('.ms-options-wrap.ms-active > .ms-options').each(function () {
                $(this).closest('.ms-options-wrap').removeClass('ms-active');
                var listID = $(this).closest('.ms-options-wrap').attr('id');
                var thisInst = $(this).parent().siblings('.' + listID + '.jqmsLoaded').data('plugin_multiselect-instance');

                // USER CALLBACK
                if (typeof thisInst.options.onControlClose == 'function') {
                  thisInst.options.onControlClose(thisInst.element);
                }
              });
            }
            // hide open option lists if escape key pressed
          }).on('keydown', function (event) {
            if ((event.keyCode || event.which) == 27) {
              // esc key
              $(this).trigger('click.ms-hideopts');
            }
          });

          // handle pressing enter|space while tabbing through
          placeholder.on('keydown', function (event) {
            var code = event.keyCode || event.which;
            if (code == 13 || code == 32) {
              // enter OR space
              placeholder.trigger('mousedown');
            }
          });

          // disable button action
          placeholder.on('mousedown', function (event) {
            // ignore if its not a left click
            if (event.which && event.which != 1) {
              return true;
            }

            // hide other menus before showing this one
            $('.ms-options-wrap.ms-active').each(function () {
              if ($(this).siblings('.' + $(this).attr('id') + '.jqmsLoaded')[0] != optionsWrap.parent().siblings('.ms-list-' + instance.listNumber + '.jqmsLoaded')[0]) {
                $(this).removeClass('ms-active');
                var thisInst = $(this).siblings('.' + $(this).attr('id') + '.jqmsLoaded').data('plugin_multiselect-instance');

                // USER CALLBACK
                if (typeof thisInst.options.onControlClose == 'function') {
                  thisInst.options.onControlClose(thisInst.element);
                }
              }
            });

            // show/hide options
            optionsWrap.closest('.ms-options-wrap').toggleClass('ms-active');

            // recalculate height
            if (optionsWrap.closest('.ms-options-wrap').hasClass('ms-active')) {
              // USER CALLBACK
              if (typeof instance.options.onControlOpen == 'function') {
                instance.options.onControlOpen(instance.element);
              }
              optionsWrap.css('maxHeight', '');

              // override with user defined maxHeight
              if (instance.options.maxHeight) {
                var maxHeight = instance.options.maxHeight;
              } else {
                // cacl default maxHeight
                var maxHeight = $(window).height() - optionsWrap.offset().top + $(window).scrollTop() - 20;
              }
              if (maxHeight) {
                // maxHeight cannot be less than options.minHeight
                maxHeight = maxHeight < instance.options.minHeight ? instance.options.minHeight : maxHeight;
                optionsWrap.css('maxHeight', maxHeight);
              }
            } else if (typeof instance.options.onControlClose == 'function') {
              instance.options.onControlClose(instance.element);
            }
          }).click(function (event) {
            event.preventDefault();
          });

          // add placeholder copy
          if (instance.options.texts.placeholder) {
            placeholder.find('span').text(instance.options.texts.placeholder);
          }

          // add search box
          if (instance.options.search) {
            optionsList.before('<div class="ms-search"><input type="text" value="" placeholder="' + instance.options.texts.search + '" /></div>');
            optionsList.after('<div class="no-result-message">' + instance.options.texts.searchNoResult + '</div>');
            var search = optionsWrap.find('.ms-search input');
            search.on('keyup', function () {
              // ignore keystrokes that don't make a difference
              if ($(this).data('lastsearch') == $(this).val()) {
                return true;
              }

              // pause timeout
              if ($(this).data('searchTimeout')) {
                clearTimeout($(this).data('searchTimeout'));
              }
              var thisSearchElem = $(this);
              $(this).data('searchTimeout', setTimeout(function () {
                thisSearchElem.data('lastsearch', thisSearchElem.val());

                // USER CALLBACK
                if (typeof instance.options.searchOptions.onSearch == 'function') {
                  instance.options.searchOptions.onSearch(instance.element);
                }

                // search non optgroup li's
                var searchString = $.trim(search.val().toLowerCase());
                if (searchString) {
                  optionsList.find('li[data-search-term*="' + searchString + '"]:not(.optgroup)').removeClass('ms-hidden');
                  optionsList.find('li:not([data-search-term*="' + searchString + '"], .optgroup)').addClass('ms-hidden');
                } else {
                  optionsList.find('.ms-hidden').removeClass('ms-hidden');
                }

                // show/hide optgroups based on if there are items visible within
                if (!instance.options.searchOptions.showOptGroups) {
                  optionsList.find('.optgroup').each(function () {
                    if ($(this).find('li:not(.ms-hidden)').length) {
                      $(this).show();
                    } else {
                      $(this).hide();
                    }
                  });
                }
                instance._updateSelectAllText();
              }, instance.options.searchOptions.delay));
            });
          }

          // add global select all options
          if (instance.options.selectAll) {
            optionsList.before('<a href="#" class="ms-selectall global">' + instance.options.texts.selectAll + '</a>');
          }

          // handle select all option
          optionsWrap.on('click', '.ms-selectall', function (event) {
            event.preventDefault();
            instance.updateSelectAll = false;
            instance.updatePlaceholder = false;
            var select = optionsWrap.parent().siblings('.ms-list-' + instance.listNumber + '.jqmsLoaded');
            if ($(this).hasClass('global')) {
              // check if any options are not selected if so then select them
              if (optionsList.find('li:not(.optgroup, .selected, .ms-hidden) input[type="checkbox"]:not(:disabled)').length) {
                // get unselected vals, mark as selected, return val list
                optionsList.find('li:not(.optgroup, .selected, .ms-hidden) input[type="checkbox"]:not(:disabled)').closest('li').addClass('selected');
                optionsList.find('li.selected input[type="checkbox"]:not(:disabled)').prop('checked', true);
              }
              // deselect everything
              else {
                optionsList.find('li:not(.optgroup, .ms-hidden).selected input[type="checkbox"]:not(:disabled)').closest('li').removeClass('selected');
                optionsList.find('li:not(.optgroup, .ms-hidden, .selected) input[type="checkbox"]:not(:disabled)').prop('checked', false);
              }
            } else if ($(this).closest('li').hasClass('optgroup')) {
              var optgroup = $(this).closest('li.optgroup');

              // check if any selected if so then select them
              if (optgroup.find('li:not(.selected, .ms-hidden) input[type="checkbox"]:not(:disabled)').length) {
                optgroup.find('li:not(.selected, .ms-hidden) input[type="checkbox"]:not(:disabled)').closest('li').addClass('selected');
                optgroup.find('li.selected input[type="checkbox"]:not(:disabled)').prop('checked', true);
              }
              // deselect everything
              else {
                optgroup.find('li:not(.ms-hidden).selected input[type="checkbox"]:not(:disabled)').closest('li').removeClass('selected');
                optgroup.find('li:not(.ms-hidden, .selected) input[type="checkbox"]:not(:disabled)').prop('checked', false);
              }
            }
            var vals = [];
            optionsList.find('li.selected input[type="checkbox"]').each(function () {
              vals.push($(this).val());
            });
            select.val(vals).trigger('change');
            instance.updateSelectAll = true;
            instance.updatePlaceholder = true;

            // USER CALLBACK
            if (typeof instance.options.onSelectAll == 'function') {
              instance.options.onSelectAll(instance.element, vals.length);
            }
            instance._updateSelectAllText();
            instance._updatePlaceholderText();
          });

          // add options to wrapper
          var options = [];
          $(instance.element).children().each(function () {
            if (this.nodeName == 'OPTGROUP') {
              var groupOptions = [];
              $(this).children('option').each(function () {
                var thisOptionAtts = {};
                for (var i = 0; i < instance.options.optionAttributes.length; i++) {
                  var thisOptAttr = instance.options.optionAttributes[i];
                  if ($(this).attr(thisOptAttr) !== undefined) {
                    thisOptionAtts[thisOptAttr] = $(this).attr(thisOptAttr);
                  }
                }
                groupOptions.push({
                  name: $(this).text(),
                  value: $(this).val(),
                  checked: $(this).prop('selected'),
                  attributes: thisOptionAtts
                });
              });
              options.push({
                label: $(this).attr('label'),
                options: groupOptions
              });
            } else if (this.nodeName == 'OPTION') {
              var thisOptionAtts = {};
              for (var i = 0; i < instance.options.optionAttributes.length; i++) {
                var thisOptAttr = instance.options.optionAttributes[i];
                if ($(this).attr(thisOptAttr) !== undefined) {
                  thisOptionAtts[thisOptAttr] = $(this).attr(thisOptAttr);
                }
              }
              options.push({
                name: $(this).text(),
                value: $(this).val(),
                checked: $(this).prop('selected'),
                attributes: thisOptionAtts
              });
            } else {
              // bad option
              return true;
            }
          });
          instance.loadOptions(options, true, false);

          // BIND SELECT ACTION
          optionsWrap.on('click', 'input[type="checkbox"]', function () {
            $(this).closest('li').toggleClass('selected');
            var select = optionsWrap.parent().siblings('.ms-list-' + instance.listNumber + '.jqmsLoaded');

            // toggle clicked option
            select.find('option[value="' + instance._escapeSelector($(this).val()) + '"]').prop('selected', $(this).is(':checked')).closest('select').trigger('change');

            // USER CALLBACK
            if (typeof instance.options.onOptionClick == 'function') {
              instance.options.onOptionClick(instance.element, this);
            }
            instance._updateSelectAllText();
            instance._updatePlaceholderText();
          });

          // BIND FOCUS EVENT
          optionsWrap.on('focusin', 'input[type="checkbox"]', function () {
            $(this).closest('label').addClass('focused');
          }).on('focusout', 'input[type="checkbox"]', function () {
            $(this).closest('label').removeClass('focused');
          });

          // USER CALLBACK
          if (typeof instance.options.onLoad === 'function') {
            instance.options.onLoad(instance.element);
          }

          // hide native select list
          $(instance.element).hide();
        },
        /* LOAD SELECT OPTIONS */
        loadOptions: function loadOptions(options, overwrite, updateSelect) {
          // console.log( options );
          overwrite = typeof overwrite == 'boolean' ? overwrite : true;
          updateSelect = typeof updateSelect == 'boolean' ? updateSelect : true;
          var instance = this;
          var select = $(instance.element);
          var optionsList = select.siblings('#ms-list-' + instance.listNumber + '.ms-options-wrap').find('> .ms-options > ul');
          var optionsWrap = select.siblings('#ms-list-' + instance.listNumber + '.ms-options-wrap').find('> .ms-options');
          if (overwrite) {
            optionsList.find('> li').remove();
            if (updateSelect) {
              select.find('> *').remove();
            }
          }
          var containers = [];
          for (var key in options) {
            // Prevent prototype methods injected into options from being iterated over.
            if (!options.hasOwnProperty(key)) {
              continue;
            }
            var thisOption = options[key];
            var container = $('<li/>');
            var appendContainer = true;

            // OPTION
            if (thisOption.hasOwnProperty('value')) {
              if (instance.options.showCheckbox && instance.options.checkboxAutoFit) {
                container.addClass('ms-reflow');
              }

              // add option to ms dropdown
              instance._addOption(container, thisOption);
              if (updateSelect) {
                var selOption = $('<option/>', {
                  value: thisOption.value,
                  text: thisOption.name
                });

                // add custom user attributes
                if (thisOption.hasOwnProperty('attributes') && Object.keys(thisOption.attributes).length) {
                  selOption.attr(thisOption.attributes);
                }

                // mark option as selected
                if (thisOption.checked) {
                  selOption.prop('selected', true);
                }
                select.append(selOption);
              }
            }
            // OPTGROUP
            else if (thisOption.hasOwnProperty('options')) {
              var optGroup = $('<optgroup/>', {
                label: thisOption.label
              });
              optionsList.find('> li.optgroup > span.label').each(function () {
                if ($(this).text() == thisOption.label) {
                  container = $(this).closest('.optgroup');
                  appendContainer = false;
                }
              });

              // prepare to append optgroup to select element
              if (updateSelect) {
                if (select.find('optgroup[label="' + thisOption.label + '"]').length) {
                  optGroup = select.find('optgroup[label="' + thisOption.label + '"]');
                } else {
                  select.append(optGroup);
                }
              }

              // setup container
              if (appendContainer) {
                container.addClass('optgroup');
                container.append('<span class="label">' + thisOption.label + '</span>');
                container.find('> .label').css({
                  clear: 'both'
                });

                // add select all link
                if (instance.options.selectGroup) {
                  container.append('<a href="#" class="ms-selectall">' + instance.options.texts.selectAll + '</a>');
                }
                container.append('<ul/>');
              }
              for (var gKey in thisOption.options) {
                // Prevent prototype methods injected into options from
                // being iterated over.
                if (!thisOption.options.hasOwnProperty(gKey)) {
                  continue;
                }
                var thisGOption = thisOption.options[gKey];
                var gContainer = $('<li/>');
                if (instance.options.showCheckbox && instance.options.checkboxAutoFit) {
                  gContainer.addClass('ms-reflow');
                }

                // no clue what this is we hit (skip)
                if (!thisGOption.hasOwnProperty('value')) {
                  continue;
                }
                instance._addOption(gContainer, thisGOption);
                container.find('> ul').append(gContainer);

                // add option to optgroup in select element
                if (updateSelect) {
                  var selOption = $('<option/>', {
                    value: thisGOption.value,
                    text: thisGOption.name
                  });

                  // add custom user attributes
                  if (thisGOption.hasOwnProperty('attributes') && Object.keys(thisGOption.attributes).length) {
                    selOption.attr(thisGOption.attributes);
                  }

                  // mark option as selected
                  if (thisGOption.checked) {
                    selOption.prop('selected', true);
                  }
                  optGroup.append(selOption);
                }
              }
            } else {
              // no clue what this is we hit (skip)
              continue;
            }
            if (appendContainer) {
              containers.push(container);
            }
          }
          optionsList.append(containers);

          // pad out label for room for the checkbox
          if (instance.options.checkboxAutoFit && instance.options.showCheckbox && !optionsWrap.hasClass('hide-checkbox')) {
            var chkbx = optionsList.find('.ms-reflow:eq(0) input[type="checkbox"]');
            if (chkbx.length) {
              var checkboxWidth = chkbx.outerWidth();
              checkboxWidth = checkboxWidth ? checkboxWidth : 15;
              optionsList.find('.ms-reflow label').css('padding-left', parseInt(chkbx.closest('label').css('padding-left')) * 2 + checkboxWidth);
              optionsList.find('.ms-reflow').removeClass('ms-reflow');
            }
          }

          // update placeholder text
          instance._updatePlaceholderText();

          // RESET COLUMN STYLES
          optionsWrap.find('ul').css({
            'column-count': '',
            'column-gap': '',
            '-webkit-column-count': '',
            '-webkit-column-gap': '',
            '-moz-column-count': '',
            '-moz-column-gap': ''
          });

          // COLUMNIZE
          if (select.find('optgroup').length) {
            // float non grouped options
            optionsList.find('> li:not(.optgroup)').css({
              'float': 'left',
              width: 100 / instance.options.columns + '%'
            });

            // add CSS3 column styles
            optionsList.find('li.optgroup').css({
              clear: 'both'
            }).find('> ul').css({
              'column-count': instance.options.columns,
              'column-gap': 0,
              '-webkit-column-count': instance.options.columns,
              '-webkit-column-gap': 0,
              '-moz-column-count': instance.options.columns,
              '-moz-column-gap': 0
            });

            // for crappy IE versions float grouped options
            if (this._ieVersion() && this._ieVersion() < 10) {
              optionsList.find('li.optgroup > ul > li').css({
                'float': 'left',
                width: 100 / instance.options.columns + '%'
              });
            }
          } else {
            // add CSS3 column styles
            optionsList.css({
              'column-count': instance.options.columns,
              'column-gap': 0,
              '-webkit-column-count': instance.options.columns,
              '-webkit-column-gap': 0,
              '-moz-column-count': instance.options.columns,
              '-moz-column-gap': 0
            });

            // for crappy IE versions float grouped options
            if (this._ieVersion() && this._ieVersion() < 10) {
              optionsList.find('> li').css({
                'float': 'left',
                width: 100 / instance.options.columns + '%'
              });
            }
          }

          // update un/select all logic
          instance._updateSelectAllText();
        },
        /* UPDATE MULTISELECT CONFIG OPTIONS */
        settings: function settings(options) {
          this.options = $.extend(true, {}, this.options, options);
          this.reload();
        },
        /* RESET THE DOM */
        unload: function unload() {
          $(this.element).siblings('#ms-list-' + this.listNumber + '.ms-options-wrap').remove();
          $(this.element).show(function () {
            $(this).css('display', '').removeClass('jqmsLoaded');
          });
        },
        /* RELOAD JQ MULTISELECT LIST */
        reload: function reload() {
          // remove existing options
          $(this.element).siblings('#ms-list-' + this.listNumber + '.ms-options-wrap').remove();
          $(this.element).removeClass('jqmsLoaded');

          // load element
          this.load();
        },
        // RESET BACK TO DEFAULT VALUES & RELOAD
        reset: function reset() {
          var defaultVals = [];
          $(this.element).find('option').each(function () {
            if ($(this).prop('defaultSelected')) {
              defaultVals.push($(this).val());
            }
          });
          $(this.element).val(defaultVals);
          this.reload();
        },
        disable: function disable(status) {
          status = typeof status === 'boolean' ? status : true;
          $(this.element).prop('disabled', status);
          $(this.element).siblings('#ms-list-' + this.listNumber + '.ms-options-wrap').find('button:first-child').prop('disabled', status);
        },
        /** PRIVATE FUNCTIONS **/
        // update the un/select all texts based on selected options and visibility
        _updateSelectAllText: function _updateSelectAllText() {
          if (!this.updateSelectAll) {
            return;
          }
          var instance = this;

          // select all not used at all so just do nothing
          if (!instance.options.selectAll && !instance.options.selectGroup) {
            return;
          }
          var optionsWrap = $(instance.element).siblings('#ms-list-' + instance.listNumber + '.ms-options-wrap').find('> .ms-options');

          // update un/select all text
          optionsWrap.find('.ms-selectall').each(function () {
            var unselected = $(this).parent().find('li:not(.optgroup,.selected,.ms-hidden)');
            $(this).text(unselected.length ? instance.options.texts.selectAll : instance.options.texts.unselectAll);
          });
          var shownOptionsCount = optionsWrap.find('> ul li:not(.optgroup,.ms-hidden)').length;

          // show/hide no-results message
          optionsWrap.find('.no-result-message').toggle(shownOptionsCount ? false : true);

          // show/hide (un)select all element as necessary
          optionsWrap.find('.ms-selectall.global').toggle(shownOptionsCount ? true : false);
        },
        // update selected placeholder text
        _updatePlaceholderText: function _updatePlaceholderText() {
          if (!this.updatePlaceholder) {
            return;
          }
          var instance = this;
          var select = $(instance.element);
          var selectVals = select.val() ? select.val() : [];
          var placeholder = select.siblings('#ms-list-' + instance.listNumber + '.ms-options-wrap').find('> button:first-child');
          var placeholderTxt = placeholder.find('span');
          var optionsWrap = select.siblings('#ms-list-' + instance.listNumber + '.ms-options-wrap').find('> .ms-options');

          // if there are disabled options get those values as well
          if (select.find('option:selected:disabled').length) {
            selectVals = [];
            select.find('option:selected').each(function () {
              selectVals.push($(this).val());
            });
          }

          // get selected options
          var selOpts = [];
          for (var key in selectVals) {
            // Prevent prototype methods injected into options from being iterated over.
            if (!selectVals.hasOwnProperty(key)) {
              continue;
            }
            selOpts.push($.trim(select.find('option[value="' + instance._escapeSelector(selectVals[key]) + '"]').text()));
            if (selOpts.length >= instance.options.maxPlaceholderOpts) {
              break;
            }
          }

          // UPDATE PLACEHOLDER TEXT WITH OPTIONS SELECTED
          placeholderTxt.text(selOpts.join(', '));
          if (selOpts.length) {
            optionsWrap.closest('.ms-options-wrap').addClass('ms-has-selections');

            // USER CALLBACK
            if (typeof instance.options.onPlaceholder == 'function') {
              instance.options.onPlaceholder(instance.element, placeholderTxt, selOpts);
            }
          } else {
            optionsWrap.closest('.ms-options-wrap').removeClass('ms-has-selections');
          }

          // replace placeholder text
          if (!selOpts.length) {
            placeholderTxt.text(instance.options.texts.placeholder);
          }
          // if copy is larger than button width use "# selected"
          else if (instance.options.replacePlaceholderText && (placeholderTxt.width() > placeholder.width() || selOpts.length != selectVals.length)) {
            placeholderTxt.text(selectVals.length + instance.options.texts.selectedOptions);
          }
        },
        // Add option to the custom dom list
        _addOption: function _addOption(container, option) {
          var instance = this;
          var optionNameText = $('<div/>').html(option.name).text();
          var thisOption = $('<label/>', {
            for: 'ms-opt-' + msOptCounter
          }).text(optionNameText);
          var thisCheckbox = $('<input>', {
            type: 'checkbox',
            title: optionNameText,
            id: 'ms-opt-' + msOptCounter,
            value: option.value
          });

          // add user defined attributes
          if (option.hasOwnProperty('attributes') && Object.keys(option.attributes).length) {
            thisCheckbox.attr(option.attributes);
          }
          if (option.checked) {
            container.addClass('default selected');
            thisCheckbox.prop('checked', true);
          }
          thisOption.prepend(thisCheckbox);
          var searchTerm = '';
          if (instance.options.searchOptions.searchText) {
            searchTerm += ' ' + optionNameText.toLowerCase();
          }
          if (instance.options.searchOptions.searchValue) {
            searchTerm += ' ' + option.value.toLowerCase();
          }
          container.attr('data-search-term', $.trim(searchTerm)).prepend(thisOption);
          msOptCounter = msOptCounter + 1;
        },
        // check ie version
        _ieVersion: function _ieVersion() {
          var myNav = navigator.userAgent.toLowerCase();
          return myNav.indexOf('msie') != -1 ? parseInt(myNav.split('msie')[1]) : false;
        },
        // escape selector
        _escapeSelector: function _escapeSelector(string) {
          if (typeof $.escapeSelector == 'function') {
            return $.escapeSelector(string);
          } else {
            return string.replace(/[!"#$%&'()*+,.\/:;<=>?@[\\\]^`{|}~]/g, "\\$&");
          }
        }
      };

      // ENABLE JQUERY PLUGIN FUNCTION
      $.fn.multiselect = function (options) {
        if (!this.length) {
          return;
        }
        var args = arguments;
        var ret;

        // menuize each list
        if (options === undefined || _typeof(options) === 'object') {
          return this.each(function () {
            if (!$.data(this, 'plugin_multiselect')) {
              $.data(this, 'plugin_multiselect', new MultiSelect(this, options));
            }
          });
        } else if (typeof options === 'string' && options[0] !== '_' && options !== 'init') {
          this.each(function () {
            var instance = $.data(this, 'plugin_multiselect');
            if (instance instanceof MultiSelect && typeof instance[options] === 'function') {
              ret = instance[options].apply(instance, Array.prototype.slice.call(args, 1));
            }

            // special destruct handler
            if (options === 'unload') {
              $.data(this, 'plugin_multiselect', null);
            }
          });
          return ret;
        }
      };
    })(jQuery);
    $('input[type="phone"]').inputmask('+7 999 999 99 99');
    var menuBtn = document.querySelector('[data-menu]');
    if (menuBtn) {
      menuBtn.addEventListener('click', function (e) {
        var $this = e.target.closest('[data-menu]'),
          $list = document.querySelector('.sidebar');
        $this.classList.toggle('--active');
        $list.classList.toggle('--active');
      });
    }
    var titleSlider = document.querySelector('.title__slider');
    if (titleSlider) {
      var swiper = new Swiper(titleSlider, {
        slidesPerView: 1,
        navigation: {
          nextEl: titleSlider.querySelector('.title__slider-btn.--next'),
          prevEl: titleSlider.querySelector('.title__slider-btn.--prev')
        },
        pagination: {
          el: titleSlider.querySelector(".swiper-pagination"),
          clickable: true,
          renderBullet: function renderBullet(index, className) {
            return '<span class="' + className + '">' + (index + 1) + '</span>';
          }
        }
      });
    }
    var detailSlider = document.querySelector('.detail__slider');
    var detailNavSlider = document.querySelector('.detail__nav-slider');
    if (detailSlider) {
      var _swiper = new Swiper(detailNavSlider, {
        slidesPerView: 2,
        spaceBetween: 20
      });
      _swiper = new Swiper(detailSlider, {
        slidesPerView: 1,
        thumbs: {
          swiper: detailNavSlider
        }
      });
    }
    var amountMath = document.querySelectorAll('[data-math]');
    if (amountMath) {
      amountMath.forEach(function (e) {
        e.addEventListener('click', function (e) {
          var $this = e.target.closest('[data-math]'),
            math = $this.dataset.math,
            $parent = $this.parentNode,
            $field = $parent.querySelector('[data-amount]'),
            value = Number($field.value);
          var $result = $parent.parentNode.querySelector('[data-amount-result]');
          if (math == '+') {
            value += 1;
            $field.value = value;
          } else if (value > 1) {
            value -= 1;
            $field.value = value;
          }
          if ($result) {
            var price = Number($parent.parentNode.querySelector('[data-amount-price]').dataset.amountPrice);
            $result.innerHTML = value * price + '₽';
          }
        });
      });
    }
    var accBtns = document.querySelectorAll('[data-acc-btn]');
    if (accBtns) {
      accBtns.forEach(function (btn) {
        btn.addEventListener('click', function (e) {
          var $this = e.target.closest('[data-acc-btn]'),
            $parent = $this.parentNode.parentNode,
            $content = $parent.querySelector('[data-acc-content]');
          $parent.classList.toggle('_active');
        });
      });
    }
    var showAll = document.querySelector('.program__show-all');
    if (showAll) {
      showAll.addEventListener('click', function (e) {
        e.preventDefault();
        var $this = e.target.closest('.program__show-all'),
          $items = $this.parentNode.parentNode.querySelectorAll('[data-acc-parent]');
        $items.forEach(function ($item) {
          $item.classList.toggle('_active');
        });
      });
    }
    var multiselects = $('select[multiple]');
    if (multiselects) {
      multiselects.each(function () {
        var $this = $(this),
          placeholder = $this.attr('aria-placeholder');
        $this.multiselect({
          columns: 1,
          texts: {
            placeholder: placeholder
          }
        });
        $this.parent().find('[data-search-term]').each(function () {
          var html = "\n          <div class=\"travel-events__custom\">\n            <svg width=\"12\" height=\"10\" viewBox=\"0 0 12 10\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path d=\"M4.19632 10L0 5.25988L1.04908 4.07484L4.19632 7.62994L10.9509 0L12 1.18503L4.19632 10Z\" fill=\"#E35800\"></path>\n            </svg>\n          </div>          \n          ";
          $(this).find('label').find('input').after(html);
        });
      });
    }
    if (document.getElementById('map')) {
      var init = function init() {
        myMap = new ymaps.Map("map", {
          center: [55.76, 37.64],
          zoom: 7
        });
      };
      ymaps.ready(init);
      var myMap;
    }
    $('[data-fancybox]').on('click', function () {
      setTimeout(function () {
        var html = $('.fancybox-toolbar').find('.fancybox-button--close').on('click', function () {
          $(this).hide();
        });
        var target = $('.fancybox-content');
        html.html("<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <rect x=\"2.82812\" width=\"24\" height=\"4\" transform=\"rotate(45 2.82812 0)\" fill=\"#E35800\"/>\n            <rect y=\"16.9705\" width=\"24\" height=\"4\" transform=\"rotate(-45 0 16.9705)\" fill=\"#E35800\"/>\n            </svg>");
        target.append(html);
      }, 700);
    });
    $('.info-tooltip__icon').on('click', function () {
      var $this = $(this),
        $content = $this.parent().find('.info-tooltip__content');
      $content.addClass('_active');
    });
    $('.info-tooltip__content').on('click', function () {
      $(this).removeClass('_active');
    });
    $('body').on('click', '.fancybox-slide', function () {
      $('.fancybox-button--close').hide();
      $.fancybox.close();
    });
    $('.promo-video__wrapper').on('click', function () {
      var $this = $(this),
        $preview = $this.find('.promo-video__preview'),
        $video = document.querySelector('video');
      if ($this.hasClass('_active')) {
        $this.removeClass('_active');
        $preview.show();
        $video.pause();
      } else {
        $this.addClass('_active');
        $preview.hide();
        $video.play();
      }
    });
  });
});

// ---------------------------------

// ❗❗❗ обязательно установите плагины eslint, stylelint, editorconfig в редактор кода.

// привязывайте js не на классы, а на дата атрибуты (data-validate)

// вместо модификаторов .block--active используем утилитарные классы
// .is-active || .is-open || .is-invalid и прочие (обязателен нейминг в два слова)
// .select.select--opened ❌ ---> [data-select].is-open ✅

// выносим все в дата атрибуты
// url до иконок пинов карты, настройки автопрокрутки слайдера, url к json и т.д.

// для адаптивного JS используейтся matchMedia и addListener
// const breakpoint = window.matchMedia(`(min-width:1024px)`);
// const breakpointChecker = () => {
//   if (breakpoint.matches) {
//   } else {
//   }
// };
// breakpoint.addListener(breakpointChecker);
// breakpointChecker();

// используйте .closest(el)

/***/ }),

/***/ "./js/modules/init-accordion.js":
/*!**************************************!*\
  !*** ./js/modules/init-accordion.js ***!
  \**************************************/
/*! exports provided: initAccordions, accordions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initAccordions", function() { return initAccordions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "accordions", function() { return accordions; });
/* harmony import */ var _utils_accordions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/accordions */ "./js/utils/accordions.js");

var accordions;
var initAccordions = function initAccordions() {
  accordions = new _utils_accordions__WEBPACK_IMPORTED_MODULE_0__["Accordions"]();
  // Используйте в разработке экспортируемую переменную accordions, window сделан для бэкэнда
  window.accordions = accordions;
};


/***/ }),

/***/ "./js/modules/init-tabs.js":
/*!*********************************!*\
  !*** ./js/modules/init-tabs.js ***!
  \*********************************/
/*! exports provided: initTabs, tabs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initTabs", function() { return initTabs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tabs", function() { return tabs; });
/* harmony import */ var _utils_tabs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/tabs */ "./js/utils/tabs.js");

var tabs;
var initTabs = function initTabs() {
  tabs = new _utils_tabs__WEBPACK_IMPORTED_MODULE_0__["Tabs"]();
  // Используйте в разработке экспортируемую переменную tabs, window сделан для бэкэнда
  window.tabs = tabs;
};


/***/ }),

/***/ "./js/modules/modals/init-modals.js":
/*!******************************************!*\
  !*** ./js/modules/modals/init-modals.js ***!
  \******************************************/
/*! exports provided: modals, initModals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "modals", function() { return modals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initModals", function() { return initModals; });
/* harmony import */ var _modals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modals */ "./js/modules/modals/modals.js");

var modals;

// Здесь реализован пример открытия модалки через колбэк закрытия
// const openModalInCloseCallback = (name, context = this) => {
//   context._enableScrolling = false;
//   context._setSettings('default');
//   modals.open(name);
// };

// closeCallback() {
//   openModalInCloseCallback('modal-5');
// },

var settings = {
  'default': {
    preventDefault: true,
    stopPlay: true,
    lockFocus: true,
    startFocus: true,
    focusBack: true,
    eventTimeout: 400,
    openCallback: false,
    closeCallback: false
  }
};
var initModals = function initModals() {
  var modalElements = document.querySelectorAll('.modal');
  if (modalElements.length) {
    modalElements.forEach(function (el) {
      setTimeout(function () {
        el.classList.remove('modal--preload');
      }, 100);
    });
  }
  modals = new _modals__WEBPACK_IMPORTED_MODULE_0__["Modals"](settings);
  // Используйте в разработке экспортируемую переменную modals, window сделан для бэкэнда
  window.modals = modals;
};


/***/ }),

/***/ "./js/modules/modals/modals.js":
/*!*************************************!*\
  !*** ./js/modules/modals/modals.js ***!
  \*************************************/
/*! exports provided: Modals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Modals", function() { return Modals; });
/* harmony import */ var _utils_scroll_lock__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/scroll-lock */ "./js/utils/scroll-lock.js");
/* harmony import */ var _utils_focus_lock__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/focus-lock */ "./js/utils/focus-lock.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


var Modals = /*#__PURE__*/function () {
  function Modals() {
    var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, Modals);
    this._scrollLock = new _utils_scroll_lock__WEBPACK_IMPORTED_MODULE_0__["ScrollLock"]();
    this._focusLock = new _utils_focus_lock__WEBPACK_IMPORTED_MODULE_1__["FocusLock"]();
    this._modalOpenElements = document.querySelectorAll('[data-open-modal]');
    this._openedModalElement = null;
    this._modalName = null;
    this._enableScrolling = true;
    this._settingKey = 'default';
    this._settings = settings;
    this._preventDefault = this._settings[this._settingKey].preventDefault;
    this._stopPlay = this._settings[this._settingKey].stopPlay;
    this._lockFocus = this._settings[this._settingKey].lockFocus;
    this._startFocus = this._settings[this._settingKey].startFocus;
    this._focusBack = this._settings[this._settingKey].focusBack;
    this._eventTimeout = this._settings[this._settingKey].eventTimeout;
    this._openCallback = this._settings[this._settingKey].openCallback;
    this._closeCallback = this._settings[this._settingKey].closeCallback;
    this._documentKeydownHandler = this._documentKeydownHandler.bind(this);
    this._documentClickHandler = this._documentClickHandler.bind(this);
    this._modalClickHandler = this._modalClickHandler.bind(this);
    this._init();
  }
  _createClass(Modals, [{
    key: "_init",
    value: function _init() {
      if (this._modalOpenElements.length) {
        document.addEventListener('click', this._documentClickHandler);
      }
    }
  }, {
    key: "_setSettings",
    value: function _setSettings() {
      var settingKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._settingKey;
      if (!this._settings[settingKey]) {
        return;
      }
      this._preventDefault = typeof this._settings[settingKey].preventDefault === 'boolean' ? this._settings[settingKey].preventDefault : this._settings[this._settingKey].preventDefault;
      this._stopPlay = typeof this._settings[settingKey].stopPlay === 'boolean' ? this._settings[settingKey].stopPlay : this._settings[this._settingKey].stopPlay;
      this._lockFocus = typeof this._settings[settingKey].lockFocus === 'boolean' ? this._settings[settingKey].lockFocus : this._settings[this._settingKey].lockFocus;
      this._startFocus = typeof this._settings[settingKey].startFocus === 'boolean' ? this._settings[settingKey].startFocus : this._settings[this._settingKey].startFocus;
      this._focusBack = typeof this._settings[settingKey].lockFocus === 'boolean' ? this._settings[settingKey].focusBack : this._settings[this._settingKey].focusBack;
      this._eventTimeout = typeof this._settings[settingKey].eventTimeout === 'number' ? this._settings[settingKey].eventTimeout : this._settings[this._settingKey].eventTimeout;
      this._openCallback = this._settings[settingKey].openCallback || this._settings[this._settingKey].openCallback;
      this._closeCallback = this._settings[settingKey].closeCallback || this._settings[this._settingKey].closeCallback;
    }
  }, {
    key: "_documentClickHandler",
    value: function _documentClickHandler(evt) {
      var target = evt.target;
      if (!target.closest('[data-open-modal]')) {
        return;
      }
      evt.preventDefault();
      this._modalName = target.closest('[data-open-modal]').dataset.openModal;
      if (!this._modalName) {
        return;
      }
      this.open();
    }
  }, {
    key: "_documentKeydownHandler",
    value: function _documentKeydownHandler(evt) {
      var isEscKey = evt.key === 'Escape' || evt.key === 'Esc';
      if (isEscKey) {
        evt.preventDefault();
        this.close(document.querySelector('.modal.is-active').dataset.modal);
      }
    }
  }, {
    key: "_modalClickHandler",
    value: function _modalClickHandler(evt) {
      var target = evt.target;
      if (!target.closest('[data-close-modal]')) {
        return;
      }
      this.close(target.closest('[data-modal]').dataset.modal);
    }
  }, {
    key: "_addListeners",
    value: function _addListeners(modal) {
      modal.addEventListener('click', this._modalClickHandler);
      document.addEventListener('keydown', this._documentKeydownHandler);
    }
  }, {
    key: "_removeListeners",
    value: function _removeListeners(modal) {
      modal.removeEventListener('click', this._modalClickHandler);
      document.removeEventListener('keydown', this._documentKeydownHandler);
    }
  }, {
    key: "_stopInteractive",
    value: function _stopInteractive(modal) {
      if (this._stopPlay) {
        modal.querySelectorAll('video, audio').forEach(function (el) {
          return el.pause();
        });
        modal.querySelectorAll('[data-iframe]').forEach(function (el) {
          el.querySelector('iframe').contentWindow.postMessage('{"event": "command", "func": "pauseVideo", "args": ""}', '*');
        });
      }
    }
  }, {
    key: "_autoPlay",
    value: function _autoPlay(modal) {
      modal.querySelectorAll('[data-iframe]').forEach(function (el) {
        var autoPlay = el.closest('[data-auto-play]');
        if (autoPlay) {
          el.querySelector('iframe').contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}', '*');
        }
      });
    }
  }, {
    key: "open",
    value: function open() {
      var _this = this;
      var modalName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._modalName;
      var modal = document.querySelector("[data-modal=\"".concat(modalName, "\"]"));
      if (!modal || modal.classList.contains('is-active')) {
        return;
      }
      document.removeEventListener('click', this._documentClickHandler);
      this._openedModalElement = document.querySelector('.modal.is-active');
      if (this._openedModalElement) {
        this._enableScrolling = false;
        this.close(this._openedModalElement.dataset.modal);
      }
      this._setSettings(modalName);
      modal.classList.add('is-active');
      if (!this._openedModalElement) {
        this._scrollLock.disableScrolling();
      }
      if (this._openCallback) {
        this._openCallback();
      }
      if (this._lockFocus) {
        this._focusLock.lock('.modal.is-active', this._startFocus);
      }
      setTimeout(function () {
        _this._addListeners(modal);
        _this._autoPlay(modal);
        document.addEventListener('click', _this._documentClickHandler);
      }, this._eventTimeout);
    }
  }, {
    key: "close",
    value: function close() {
      var _this2 = this;
      var modalName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._modalName;
      var modal = document.querySelector("[data-modal=\"".concat(modalName, "\"]"));
      document.removeEventListener('click', this._documentClickHandler);
      if (!modal || !modal.classList.contains('is-active')) {
        return;
      }
      if (this._lockFocus) {
        this._focusLock.unlock(this._focusBack);
      }
      modal.classList.remove('is-active');
      this._removeListeners(modal);
      this._stopInteractive(modal);
      if (this._closeCallback) {
        this._closeCallback();
      }
      if (this._enableScrolling) {
        setTimeout(function () {
          _this2._scrollLock.enableScrolling();
        }, this._eventTimeout);
      }
      setTimeout(function () {
        document.addEventListener('click', _this2._documentClickHandler);
      }, this._eventTimeout);
      this._setSettings('default');
      this._enableScrolling = true;
    }
  }]);
  return Modals;
}();

/***/ }),

/***/ "./js/utils/accordions.js":
/*!********************************!*\
  !*** ./js/utils/accordions.js ***!
  \********************************/
/*! exports provided: Accordions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Accordions", function() { return Accordions; });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var Accordions = /*#__PURE__*/function () {
  function Accordions() {
    _classCallCheck(this, Accordions);
    this._openHeight = 0;
    this._windowWidth = window.innerWidth;
    this._documentClickHandler = this._documentClickHandler.bind(this);
    this._windowResizeHandler = this._windowResizeHandler.bind(this);
    this._init();
  }
  _createClass(Accordions, [{
    key: "_init",
    value: function _init() {
      this.fullUpdate();
      document.addEventListener('click', this._documentClickHandler);
      window.addEventListener('resize', this._windowResizeHandler);
    }
  }, {
    key: "_documentClickHandler",
    value: function _documentClickHandler(evt) {
      var target = evt.target;
      if (!target.closest('[data-accordion="button"]')) {
        return;
      }
      evt.preventDefault();
      var parent = target.closest('[data-accordion="parent"]');
      if (parent.dataset.destroy && !window.matchMedia(parent.dataset.destroy).matches) {
        return;
      }
      var element = target.closest('[data-accordion="element"]');
      if (element.classList.contains('is-active')) {
        this.closeAccordion(element);
        return;
      }
      this.openAccordion(element);
    }
  }, {
    key: "_windowResizeHandler",
    value: function _windowResizeHandler() {
      if (this._windowWidth === window.innerWidth) {
        return;
      }
      this._windowWidth = window.innerWidth;
      this.updateAccordionsHeight();
    }
  }, {
    key: "closeAllAccordion",
    value: function closeAllAccordion(parent) {
      var _this = this;
      var elements = parent.querySelectorAll('[data-accordion="element"]');
      elements.forEach(function (element) {
        var currentParent = element.closest('[data-accordion="parent"]');
        if (currentParent === parent) {
          _this.closeAccordion(element);
        }
      });
    }
  }, {
    key: "updateAccordionsHeight",
    value: function updateAccordionsHeight() {
      var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      if (element) {
        var content = element.querySelector('[data-accordion="content"]');
        content.style.transition = 'none';
        content.style.maxHeight = "".concat(content.scrollHeight, "px");
        setTimeout(function () {
          content.style.transition = null;
        });
        return;
      }
      var closeElements = document.querySelectorAll('[data-accordion="element"]:not(.is-active)');
      closeElements.forEach(function (closeElement) {
        var parent = closeElement.closest('[data-accordion="parent"]');
        var content = closeElement.querySelector('[data-accordion="content"]');
        if (parent.dataset.destroy && !window.matchMedia(parent.dataset.destroy).matches) {
          content.style.maxHeight = '100%';
          return;
        }
        content.style.maxHeight = null;
      });
      var openElements = document.querySelectorAll('[data-accordion="element"].is-active');
      openElements.forEach(function (openElement) {
        var content = openElement.querySelector('[data-accordion="content"]');
        var parent = openElement.closest('[data-accordion="parent"]');
        if (parent.dataset.destroy && !window.matchMedia(parent.dataset.destroy).matches) {
          content.style.maxHeight = '100%';
          return;
        }
        content.style.transition = 'none';
        content.style.maxHeight = "".concat(content.scrollHeight, "px");
        setTimeout(function () {
          content.style.transition = null;
        });
      });
    }
  }, {
    key: "fullUpdate",
    value: function fullUpdate() {
      var _this2 = this;
      var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var transition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var openElements;
      if (parent) {
        openElements = parent.querySelectorAll('[data-accordion="element"].is-active');
      } else {
        openElements = document.querySelectorAll('[data-accordion="element"].is-active');
      }
      openElements.forEach(function (openElement) {
        var innerParent = openElement.querySelector('[data-accordion="parent"]');
        if (innerParent) {
          return;
        }
        _this2.openAccordion(openElement, transition);
      });
      this.updateAccordionsHeight();
    }
  }, {
    key: "openAccordion",
    value: function openAccordion(element) {
      var transition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var parentElement = element.closest('[data-accordion="parent"]');
      var contentElement = element.querySelector('[data-accordion="content"]');
      this._openHeight += contentElement.scrollHeight;
      if (parentElement.hasAttribute('data-single')) {
        this.closeAllAccordion(parentElement);
      }
      element.classList.add('is-active');
      if (transition) {
        contentElement.style.maxHeight = "".concat(this._openHeight, "px");
      } else {
        contentElement.style.transition = 'none';
        contentElement.style.maxHeight = "".concat(this._openHeight, "px");
        setTimeout(function () {
          contentElement.style.transition = null;
        });
      }
      if (parentElement.closest('[data-accordion="element"]')) {
        this.openAccordion(parentElement.closest('[data-accordion="element"]'), transition);
        return;
      }
      this._openHeight = 0;
    }
  }, {
    key: "closeAccordion",
    value: function closeAccordion(element) {
      var transition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var contentElement = element.querySelector('[data-accordion="content"]');
      if (!contentElement) {
        return;
      }
      element.classList.remove('is-active');
      if (transition) {
        contentElement.style.maxHeight = '0';
      } else {
        contentElement.style.transition = 'none';
        contentElement.style.maxHeight = '0';
        setTimeout(function () {
          contentElement.style.transition = null;
        });
      }
    }
  }]);
  return Accordions;
}();

/***/ }),

/***/ "./js/utils/focus-lock.js":
/*!********************************!*\
  !*** ./js/utils/focus-lock.js ***!
  \********************************/
/*! exports provided: FocusLock */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FocusLock", function() { return FocusLock; });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var SELECTORS = ['a[href]', 'area[href]', 'input:not([disabled]):not([type="hidden"]):not([aria-hidden])', 'select:not([disabled]):not([aria-hidden])', 'textarea:not([disabled]):not([aria-hidden])', 'button:not([disabled]):not([aria-hidden])', 'iframe', 'object', 'embed', '[contenteditable]', '[tabindex]:not([tabindex^="-"])'];
var FocusLock = /*#__PURE__*/function () {
  function FocusLock() {
    _classCallCheck(this, FocusLock);
    this._lockedSelector = null;
    this._focusableElements = null;
    this._endElement = null;
    this._selectors = SELECTORS;
    this._documentKeydownHandler = this._documentKeydownHandler.bind(this);
  }
  _createClass(FocusLock, [{
    key: "_documentKeydownHandler",
    value: function _documentKeydownHandler(evt) {
      var activeElement = document.activeElement;
      if (evt.key === 'Tab') {
        if (!this._focusableElements.length) {
          evt.preventDefault();
          activeElement.blur();
          return;
        }
        if (this._focusableElements.length === 1) {
          evt.preventDefault();
          this._focusableElements[0].focus();
          return;
        }
        if (this._focusableElements.length > 1 && !activeElement.closest(this._lockedSelector)) {
          evt.preventDefault();
          this._focusableElements[0].focus();
          return;
        }
      }
      if (evt.key === 'Tab' && !evt.shiftKey && activeElement === this._focusableElements[this._focusableElements.length - 1]) {
        evt.preventDefault();
        this._focusableElements[0].focus();
      }
      if (evt.key === 'Tab' && evt.shiftKey && activeElement === this._focusableElements[0]) {
        evt.preventDefault();
        this._focusableElements[this._focusableElements.length - 1].focus();
      }
    }
  }, {
    key: "lock",
    value: function lock(lockedSelector) {
      var startFocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.unlock();
      this._lockedSelector = lockedSelector;
      var lockedElement = document.querySelector(this._lockedSelector);
      if (!lockedElement) {
        return;
      }
      this._focusableElements = lockedElement.querySelectorAll(this._selectors);
      this._endElement = document.activeElement;
      var startElement = lockedElement.querySelector('[data-focus]') || this._focusableElements[0];
      if (this._endElement) {
        this._endElement.blur();
      }
      if (startElement && startFocus) {
        startElement.focus();
      }
      document.addEventListener('keydown', this._documentKeydownHandler);
    }
  }, {
    key: "unlock",
    value: function unlock() {
      var returnFocus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      if (this._endElement && returnFocus) {
        this._endElement.focus();
      }
      this._lockedSelector = null;
      this._focusableElements = null;
      this._endElement = null;
      document.removeEventListener('keydown', this._documentKeydownHandler);
    }
  }]);
  return FocusLock;
}();
window.focusLock = new FocusLock();

/***/ }),

/***/ "./js/utils/ios-checker.js":
/*!*********************************!*\
  !*** ./js/utils/ios-checker.js ***!
  \*********************************/
/*! exports provided: iosChecker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "iosChecker", function() { return iosChecker; });
var iosChecker = function iosChecker() {
  return ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform)
  // iPad on iOS 13 detection
  || navigator.userAgent.includes('Mac') && 'ontouchend' in document;
};

/***/ }),

/***/ "./js/utils/ios-vh-fix.js":
/*!********************************!*\
  !*** ./js/utils/ios-vh-fix.js ***!
  \********************************/
/*! exports provided: iosVhFix */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "iosVhFix", function() { return iosVhFix; });
/* harmony import */ var _ios_checker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ios-checker */ "./js/utils/ios-checker.js");

var iosVhFix = function iosVhFix() {
  if (!(!!window.MSInputMethodContext && !!document.documentMode)) {
    if (Object(_ios_checker__WEBPACK_IMPORTED_MODULE_0__["iosChecker"])()) {
      var vh = window.innerHeight * 0.01;
      document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      window.addEventListener('resize', function () {
        vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      });
    }
  }
};


/***/ }),

/***/ "./js/utils/scroll-lock.js":
/*!*********************************!*\
  !*** ./js/utils/scroll-lock.js ***!
  \*********************************/
/*! exports provided: ScrollLock */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollLock", function() { return ScrollLock; });
/* harmony import */ var _ios_checker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ios-checker */ "./js/utils/ios-checker.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var ScrollLock = /*#__PURE__*/function () {
  function ScrollLock() {
    _classCallCheck(this, ScrollLock);
    this._iosChecker = _ios_checker__WEBPACK_IMPORTED_MODULE_0__["iosChecker"];
    this._lockClass = this._iosChecker() ? 'scroll-lock-ios' : 'scroll-lock';
    this._scrollTop = null;
    this._fixedBlockElements = document.querySelectorAll('[data-fix-block]');
  }
  _createClass(ScrollLock, [{
    key: "_getScrollbarWidth",
    value: function _getScrollbarWidth() {
      return window.innerWidth - document.documentElement.clientWidth;
    }
  }, {
    key: "_getBodyScrollTop",
    value: function _getBodyScrollTop() {
      return self.pageYOffset || document.documentElement && document.documentElement.ScrollTop || document.body && document.body.scrollTop;
    }
  }, {
    key: "disableScrolling",
    value: function disableScrolling() {
      var _this = this;
      this._scrollTop = document.body.dataset.scroll = document.body.dataset.scroll ? document.body.dataset.scroll : this._getBodyScrollTop();
      if (this._getScrollbarWidth()) {
        document.body.style.paddingRight = "".concat(this._getScrollbarWidth(), "px");
        this._fixedBlockElements.forEach(function (block) {
          block.style.paddingRight = "".concat(_this._getScrollbarWidth(), "px");
        });
      }
      document.body.style.top = "-".concat(this._scrollTop, "px");
      document.body.classList.add(this._lockClass);
    }
  }, {
    key: "enableScrolling",
    value: function enableScrolling() {
      document.body.classList.remove(this._lockClass);
      window.scrollTo(0, +document.body.dataset.scroll);
      document.body.style.paddingRight = null;
      document.body.style.top = null;
      this._fixedBlockElements.forEach(function (block) {
        block.style.paddingRight = null;
      });
      document.body.removeAttribute('data-scroll');
      this._scrollTop = null;
    }
  }]);
  return ScrollLock;
}();
window.scrollLock = new ScrollLock();

/***/ }),

/***/ "./js/utils/tabs.js":
/*!**************************!*\
  !*** ./js/utils/tabs.js ***!
  \**************************/
/*! exports provided: Tabs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Tabs", function() { return Tabs; });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var Tabs = /*#__PURE__*/function () {
  function Tabs() {
    _classCallCheck(this, Tabs);
    this._windowWidth = window.innerWidth;
    this._documentClickHandler = this._documentClickHandler.bind(this);
    this._init();
  }
  _createClass(Tabs, [{
    key: "_init",
    value: function _init() {
      this._initAllTabs();
      document.addEventListener('click', this._documentClickHandler);
    }
  }, {
    key: "_resizeObserver",
    value: function _resizeObserver() {
      var _this = this;
      return new ResizeObserver(function (entries) {
        var _iterator = _createForOfIteratorHelper(entries),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var entry = _step.value;
            if (entry.target.classList.contains('is-active')) {
              _this._updateTabHeight();
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      });
    }
  }, {
    key: "_documentClickHandler",
    value: function _documentClickHandler(evt) {
      var target = evt.target;
      if (!target.closest('[data-tabs="control"]')) {
        return;
      }
      evt.preventDefault();
      var control = target.closest('[data-tabs="control"]');
      this.openTab(control);
    }
  }, {
    key: "_initAllTabs",
    value: function _initAllTabs() {
      var _this2 = this;
      var tabs = document.querySelectorAll('[data-tabs="parent"]');
      var forLoadTabs = document.querySelectorAll('[data-tabs="element"].for-load');
      tabs.forEach(function (tab) {
        _this2._initTab(tab);
      });
      forLoadTabs.forEach(function (tab) {
        tab.classList.remove('for-load');
      });
    }
  }, {
    key: "_removeAllActiveClasses",
    value: function _removeAllActiveClasses(tabControlElements, tabElements) {
      tabElements.forEach(function (tab) {
        tab.classList.remove('is-active');
      });
      tabControlElements.forEach(function (element, index) {
        element.classList.remove('is-active');
        element.setAttribute('data-index', index);
      });
    }
  }, {
    key: "_setTabStartState",
    value: function _setTabStartState(tab, dataHeight, tabElements, tabContentElement, tabControlElements, dataDelay) {
      var activeIndex = this._returnActiveIndex(tabControlElements);
      var blockHeight = dataHeight === 'max' ? this._returnMaxHeight(tabElements) : tabElements[activeIndex].offsetHeight;
      this._removeAllActiveClasses(tabControlElements, tabElements);
      tab.classList.add('no-transition');
      tabControlElements[activeIndex].classList.add('is-active');
      tabElements[activeIndex].classList.add('is-active');
      if (dataHeight !== 'unset') {
        tabContentElement.style.height = "".concat(blockHeight, "px");
      }
      setTimeout(function () {
        if (dataDelay) {
          tab.classList.remove('no-transition');
        }
      }, dataDelay);
    }
  }, {
    key: "_returnActiveIndex",
    value: function _returnActiveIndex(tabControlElements) {
      var activeIndex = 0;
      var flag = true;
      tabControlElements.forEach(function (control, index) {
        if (control.classList.contains('is-active') && flag) {
          activeIndex = index;
          flag = false;
        }
      });
      return activeIndex;
    }
  }, {
    key: "_returnMaxHeight",
    value: function _returnMaxHeight(tabElements) {
      var height = [];
      tabElements.forEach(function (element) {
        height.push(element.offsetHeight);
      });
      height.sort(function (a, b) {
        return a - b;
      });
      return height[height.length - 1];
    }
  }, {
    key: "_returnScopeList",
    value: function _returnScopeList(nodeList, parent) {
      var array = [];
      nodeList.forEach(function (element) {
        var elementParent = element.closest('[data-tabs="parent"]');
        if (elementParent === parent) {
          array.push(element);
        }
      });
      return array;
    }
  }, {
    key: "_returnScopeChild",
    value: function _returnScopeChild(nodeList, parent) {
      var currentChild;
      nodeList.forEach(function (element) {
        var elementParent = element.closest('[data-tabs="parent"]');
        if (elementParent === parent) {
          currentChild = element;
        }
      });
      return currentChild;
    }
  }, {
    key: "_updateTabHeight",
    value: function _updateTabHeight() {
      var _this3 = this;
      var activeElements = document.querySelectorAll('[data-tabs="element"].is-active');
      activeElements.forEach(function (element) {
        var transition = false;
        var parent = element.closest('[data-tabs="parent"]');
        if (parent.closest('[data-tabs="element"]')) {
          transition = true;
        }
        _this3._setTabElementHeight(element, transition);
      });
    }
  }, {
    key: "_setTabElementHeight",
    value: function _setTabElementHeight(element, transition) {
      var parentElement = element.closest('[data-tabs="parent"]');
      var dataHeight = parentElement.dataset.height;
      var contentElement = this._returnScopeChild(parentElement.querySelectorAll('[data-tabs="content"]'), parentElement);
      var tabElements = this._returnScopeList(parentElement.querySelectorAll('[data-tabs="element"]'), parentElement);
      if (!transition) {
        parentElement.classList.add('no-transition');
      }
      if (dataHeight === 'max') {
        contentElement.style.height = "".concat(this._returnMaxHeight(tabElements), "px");
      } else if (dataHeight === 'unset') {
        contentElement.style.height = null;
      } else {
        contentElement.style.height = "".concat(this._returnScopeChild(parentElement.querySelectorAll('[data-tabs="element"].is-active'), parentElement).offsetHeight, "px");
      }
      setTimeout(function () {
        return parentElement.classList.remove('no-transition');
      });
    }
  }, {
    key: "_initTab",
    value: function _initTab(tab) {
      var _this4 = this;
      var dataHeight = tab.dataset.height;
      var dataDelay = tab.dataset.delay ? tab.dataset.delay : 0;
      var tabContentElement = tab.querySelector('[data-tabs="content"]');
      var tabControlElements = this._returnScopeList(tab.querySelectorAll('[data-tabs="control"]'), tab);
      var tabElements = this._returnScopeList(tab.querySelectorAll('[data-tabs="element"]'), tab);
      this._setTabStartState(tab, dataHeight, tabElements, tabContentElement, tabControlElements, dataDelay);
      if (dataHeight !== 'unset') {
        tabElements.forEach(function (element) {
          _this4._resizeObserver().observe(element);
        });
      }
      setTimeout(function () {
        tab.classList.remove('no-transition-global');
      });
    }
  }, {
    key: "reInit",
    value: function reInit() {
      this._initAllTabs();
    }
  }, {
    key: "openTab",
    value: function openTab(control) {
      var currentIndex = control.dataset.index;
      var parentElement = control.closest('[data-tabs="parent"]');
      if (control.classList.contains('is-active') || parentElement.classList.contains('no-action')) {
        return;
      }
      var dataDelay = parentElement.dataset.delay ? parentElement.dataset.delay : 0;
      var dataHeight = parentElement.dataset.height;
      var contentElement = parentElement.querySelector('[data-tabs="content"]');
      var tabElements = this._returnScopeList(parentElement.querySelectorAll('[data-tabs="element"]'), parentElement);
      var activeControl = this._returnScopeChild(parentElement.querySelectorAll('[data-tabs="control"].is-active'), parentElement);
      var activeElement = this._returnScopeChild(parentElement.querySelectorAll('[data-tabs="element"].is-active'), parentElement);
      var currentHeight = contentElement.offsetHeight;
      var newHeight = tabElements[currentIndex].offsetHeight;
      parentElement.classList.add('no-action');
      document.activeElement.blur();
      if (activeControl) {
        activeControl.classList.remove('is-active');
      }
      if (activeElement) {
        activeElement.classList.remove('is-active');
      }
      if (currentHeight > newHeight) {
        setTimeout(function () {
          if (dataHeight !== 'max' && dataHeight !== 'unset') {
            contentElement.style.height = newHeight + 'px';
          }
          control.classList.add('is-active');
          tabElements[currentIndex].classList.add('is-active');
          parentElement.classList.remove('no-action');
        }, dataDelay);
      } else {
        if (dataHeight !== 'max' && dataHeight !== 'unset') {
          contentElement.style.height = newHeight + 'px';
        }
        setTimeout(function () {
          control.classList.add('is-active');
          tabElements[currentIndex].classList.add('is-active');
          parentElement.classList.remove('no-action');
        }, dataDelay);
      }
    }
  }]);
  return Tabs;
}();

/***/ })

/******/ });
//# sourceMappingURL=main.min.js.map